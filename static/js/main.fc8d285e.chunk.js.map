{"version":3,"sources":["logo.svg","components/Navbar/index.js","components/Jumbotron/index.js","components/Container/index.js","components/Card/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","Component","render","className","href","onAnimationEnd","this","props","onNavbarAnimationEnd","flash","message","currentScore","topScore","Jumbotron","Container","children","Card","image","backgroundImage","onClick","handleClick","id","style","Footer","src","logo","alt","App","constructor","super","alreadyChosen","bind","handleMessageAnimationEnd","state","score","shake","characters","shuffle","list","pick","current","remaining","length","Math","floor","random","highScore","includes","splice","setState","push","map","character","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc8d285e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar fixed-top navbar-expand navbar-dark\">\n        <a href=\"/\" className=\"navbar-brand\">\n          Clicky Game\n        </a>\n        <button className=\"navbar-toggler\">\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"collapse navbar-collapse\">\n          <div className=\"navbar-nav mx-auto\">\n            <span\n              onAnimationEnd={() => this.props.onNavbarAnimationEnd()}\n              className={\n                'navbar-text user-message' +\n                (this.props.flash ? ` ${this.props.flash}` : '')\n              }\n            >\n              {this.props.message}\n            </span>\n          </div>\n          <div className=\"navbar-nav\">\n            <span className=\"navbar-text text-white\">\n              Score:&nbsp;{this.props.currentScore}&nbsp;| Top&nbsp;Score:&nbsp;\n              {this.props.topScore}\n            </span>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport './Jumbotron.css';\n\nclass Jumbotron extends Component {\n  render() {\n    return (\n      <div className=\"jumbotron text-center rounded-0\">\n        <div className=\"caption\">\n          <h1 className=\"game-title\">\n            Looney Tunes\n            <small>\n              <sup>&reg;</sup>\n            </small>{' '}\n            Clicky Game!\n          </h1>\n          <p className=\"instructions\">\n            Click on an image to earn points.\n            <br /> Do not click on any single image more than once!\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Jumbotron;\n","import React, { Component } from 'react';\nimport './Container.css';\n\nclass Container extends Component {\n  render() {\n    return (\n      <main className=\"container game-container\">{this.props.children}</main>\n    );\n  }\n}\n\nexport default Container;\n","import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n  render() {\n    // The only way that worked to set a background image in an inline style.\n    let image = {\n      backgroundImage: `url(${this.props.image})`\n    };\n\n    return (\n      <div\n        className=\"card shadow rounded-0 click-item\"\n        onClick={() => this.props.handleClick(this.props.id)}\n      >\n        <div className=\"img-container\" style={image} />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport logo from '../../logo.svg';\nimport './Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <div className=\"container-fluid\">\n          <p>\n            Looney Tunes<sup>&reg;</sup> Clicky Game!&nbsp;\n            <img src={logo} className=\"react-logo\" alt=\"React Logo\" />\n          </p>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Jumbotron from './components/Jumbotron';\nimport Container from './components/Container';\nimport Card from './components/Card';\nimport Footer from './components/Footer';\nimport characters from './characters';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMessageAnimationEnd = this.handleMessageAnimationEnd.bind(this);\n    this.state = {\n      score: 0,\n      topScore: 0,\n      shake: false,\n      message: 'Click an image to begin play!',\n      flash: false,\n      characters: this.shuffle(characters)\n    };\n  }\n\n  alreadyChosen = [];\n\n  /**\n   * Fisher-Yates shuffle.\n   *\n   * @see https://bost.ocks.org/mike/shuffle/\n   * @see https://www.frankmitchell.org/2015/01/fisher-yates/\n   *\n   * @param list\n   * @returns {*}\n   */\n  shuffle(list) {\n    let pick;\n    let current;\n    let remaining = list.length;\n\n    while (remaining !== 0) {\n      pick = Math.floor(Math.random() * remaining--);\n\n      current = list[remaining];\n      list[remaining] = list[pick];\n      list[pick] = current;\n    }\n\n    return list;\n  }\n\n  handleClick(id) {\n    const characters = this.shuffle(this.state.characters);\n    let highScore = this.state.topScore;\n\n    if (this.alreadyChosen.includes(id)) {\n      this.alreadyChosen.splice(0);\n      return this.setState({\n        score: 0,\n        shake: true,\n        characters: characters,\n        message: 'You guessed incorrectly.',\n        flash: 'incorrect'\n      });\n    } else {\n      this.alreadyChosen.push(id);\n\n      const currentScore = this.state.score + 1;\n\n      if (currentScore > highScore) {\n        highScore = currentScore;\n      }\n\n      return this.setState({\n        score: currentScore,\n        shake: false,\n        topScore: highScore,\n        characters: characters,\n        message: 'You guessed correctly!',\n        flash: 'correct'\n      });\n    }\n  }\n\n  handleMessageAnimationEnd() {\n    this.setState({\n      flash: false\n    });\n  }\n\n  render() {\n    const { shake } = this.state;\n\n    return (\n      <div className=\"clicky-game\">\n        <Navbar\n          message={this.state.message}\n          currentScore={this.state.score}\n          topScore={this.state.topScore}\n          flash={this.state.flash}\n          onNavbarAnimationEnd={this.handleMessageAnimationEnd}\n        />\n        <Jumbotron />\n        <Container>\n          <div className={'card-flex' + (shake ? ' shake' : '')}>\n            {this.state.characters.map((character) => (\n              <Card\n                handleClick={this.handleClick}\n                id={character.id}\n                key={character.id}\n                image={character.image}\n              />\n            ))}\n          </div>\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}